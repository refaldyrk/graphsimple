package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"github.com/google/uuid"
	"github.com/refaldyrk/graphsimple/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

// CreateHalte is the resolver for the createHalte field.
func (r *mutationResolver) CreateHalte(ctx context.Context, input *model.NewHalte) (*model.Halte, error) {
	var halte model.Halte

	halte.Name = input.Name
	halte.ID = "halte" + uuid.NewString()
	halte.HalteID = uuid.NewString()

	_, err := r.DB.Collection("halte").InsertOne(ctx, halte)
	if err != nil {
		return nil, err
	}

	return &halte, nil
}

// CreateCorridor is the resolver for the createCorridor field.
func (r *mutationResolver) CreateCorridor(ctx context.Context, input *model.NewCorridor) (*model.Corridor, error) {
	var corridor model.Corridor

	corridor.ID = "corridor" + uuid.NewString()
	corridor.CorridorID = uuid.NewString()
	corridor.Name = input.Name

	//Find Halte By ID
	var halte model.Halte

	r.DB.Collection("halte").Find(ctx, bson.M{"halteid": input.FromHalteID}).One(&halte)
	corridor.From = &halte

	var halte2 model.Halte
	r.DB.Collection("halte").Find(ctx, bson.M{"halteid": input.ToHalteID}).One(&halte2)
	corridor.To = &halte2

	_, err := r.DB.Collection("corridor").InsertOne(ctx, corridor)
	if err != nil {
		return nil, err
	}

	return &corridor, nil
}

// CreateSubway is the resolver for the createSubway field.
func (r *mutationResolver) CreateSubway(ctx context.Context, input *model.NewSubway) (*model.Subway, error) {
	var subway model.Subway

	subway.ID = "subway" + uuid.NewString()
	subway.SubwayID = uuid.NewString()
	subway.Name = input.Name

	var corridor model.Corridor
	r.DB.Collection("corridor").Find(ctx, bson.M{"corridorid": input.CorridorID}).One(&corridor)
	subway.Corridor = &corridor

	_, err := r.DB.Collection("subway").InsertOne(ctx, subway)
	if err != nil {
		return nil, err
	}

	return &subway, nil
}

// Halte is the resolver for the halte field.
func (r *queryResolver) Halte(ctx context.Context) ([]*model.Halte, error) {
	var haltes []*model.Halte

	r.DB.Collection("halte").Find(ctx, bson.M{}).All(&haltes)

	return haltes, nil
}

// Corridor is the resolver for the corridor field.
func (r *queryResolver) Corridor(ctx context.Context) ([]*model.Corridor, error) {
	var corridors []*model.Corridor

	r.DB.Collection("corridor").Find(ctx, bson.M{}).All(&corridors)

	return corridors, nil
}

// Subway is the resolver for the subway field.
func (r *queryResolver) Subway(ctx context.Context) ([]*model.Subway, error) {
	var subways []*model.Subway

	r.DB.Collection("subway").Find(ctx, bson.M{}).All(&subways)

	return subways, nil
}

// FindHalteByID is the resolver for the findHalteByID field.
func (r *queryResolver) FindHalteByID(ctx context.Context, id string) (*model.Halte, error) {
	var halte model.Halte

	r.DB.Collection("halte").Find(ctx, bson.M{"halteid": id}).One(&halte)

	return &halte, nil
}

// FindCorridorByID is the resolver for the findCorridorByID field.
func (r *queryResolver) FindCorridorByID(ctx context.Context, id string) (*model.Corridor, error) {
	var corridor model.Corridor

	r.DB.Collection("corridor").Find(ctx, bson.M{"corridorid": id}).One(&corridor)

	return &corridor, nil
}

// FindSubwayByID is the resolver for the findSubwayByID field.
func (r *queryResolver) FindSubwayByID(ctx context.Context, id string) (*model.Subway, error) {
	var subway model.Subway

	r.DB.Collection("subway").Find(ctx, bson.M{"subwayid": id}).One(&subway)

	return &subway, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
